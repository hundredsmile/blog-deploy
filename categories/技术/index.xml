<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on 嘉树的世界</title><link>https://gaxu.xyz/categories/%E6%8A%80%E6%9C%AF/</link><description>Recent content in 技术 on 嘉树的世界</description><generator>Hugo</generator><language>zh</language><copyright>2023–2024 嘉树.</copyright><lastBuildDate>Wed, 28 Aug 2024 20:00:49 +0800</lastBuildDate><atom:link href="https://gaxu.xyz/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>在 Mac 上管理多个 GitHub 账号</title><link>https://gaxu.xyz/posts/multiple-gh-accounts/</link><pubDate>Tue, 27 Aug 2024 19:29:37 +0800</pubDate><guid>https://gaxu.xyz/posts/multiple-gh-accounts/</guid><description>&lt;h2 id="动机">动机&lt;/h2>
&lt;p>我有两个 GitHub 账号，希望一个是面向工作，另一个则是私人的。那么，如何在一台 Mac 上无缝切换这个两个账号呢？本文列出了关键步骤。其他操作系统应当类似。&lt;/p>
&lt;h2 id="生成-ssh-密钥">生成 SSH 密钥&lt;/h2>
&lt;p>GitHub 提供了两种方式与远程仓库建立联系：SSH 和 HTTPS。简单来说，当我们向远程仓库 push 代码时，HTTPS 每次都需要提供所谓的 access token（当然这个活其实也只是第一次 push 的时候需要，因为 Mac 会把这个 token 存放在钥匙串里面，以后就不需要手动输入了），而 SSH 使用一对公钥和私钥取得认证（事先生成，然后本地和远程分别拿着私钥和公钥），不需要记住用户名和 token。就我们的目的而言，只能用 SSH 来实现。&lt;/p>
&lt;p>假设我们有两个账号，personal 和 work，以下我们分别为它们生成 SSH 密钥。更多账号操作也是一样的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">cd&lt;/span> ~/.ssh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh-keygen -t rsa -C &lt;span style="color:#a3be8c">&amp;#34;email@personal.com&amp;#34;&lt;/span> -f &lt;span style="color:#a3be8c">&amp;#34;gh-personal&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh-keygen -t rsa -C &lt;span style="color:#a3be8c">&amp;#34;email@work.com&amp;#34;&lt;/span> -f &lt;span style="color:#a3be8c">&amp;#34;gh-work&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行完了之后，在 &lt;code>.ssh&lt;/code> 文件夹下我们得到了四个文件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>gh-personal&lt;/code>&lt;/li>
&lt;li>&lt;code>gh-personal.pub&lt;/code>&lt;/li>
&lt;li>&lt;code>gh-work&lt;/code>&lt;/li>
&lt;li>&lt;code>gh-work.pub&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其中带 &lt;code>.pub&lt;/code> 扩展名的是存公钥的，不带的是存私钥的。&lt;/p>
&lt;h2 id="分配私钥和公钥">分配私钥和公钥&lt;/h2>
&lt;h3 id="将私钥加入-ssh-agent">将私钥加入 SSH Agent&lt;/h3>
&lt;p>上一步只是生成了密钥，还需要把私钥加入 Mac 的钥匙串 (keychain)，也就是保存密码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh-add --apple-use-keychain ~/.ssh/gh-personal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh-add --apple-use-keychain ~/.ssh/gh-work
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选项 &lt;code>--apple-use-keychain&lt;/code> 就明确声明使用 Mac 的钥匙串系统存放密钥。&lt;/p></description></item></channel></rss>